// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from '@hey-api/client-fetch';
import type {
  GetSelfUserError,
  GetSelfUserResponse,
  GetWorkflowData,
  GetWorkflowError,
  GetWorkflowResponse,
  DeleteWorkflowData,
  DeleteWorkflowError,
  DeleteWorkflowResponse,
  GetWorkflowsError,
  GetWorkflowsResponse,
  CreateWorkflowData,
  CreateWorkflowError,
  CreateWorkflowResponse,
  UpdateWorkflowData,
  UpdateWorkflowError,
  UpdateWorkflowResponse,
  RunWorkflowData,
  RunWorkflowError,
  RunWorkflowResponse,
  ReturnWorkflowData,
  ReturnWorkflowError,
  ReturnWorkflowResponse,
} from './types.gen';

export const client = createClient(createConfig());

export class UsersService {
  /**
   * Get Self User
   * Get the currently signed in user
   */
  public static getSelfUser<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetSelfUserResponse,
      GetSelfUserError,
      ThrowOnError
    >({
      ...options,
      url: '/api/users/self',
    });
  }
}

export class WorkflowsService {
  /**
   * Get Workflow
   * Get a workflow by ID
   */
  public static getWorkflow<ThrowOnError extends boolean = false>(
    options: Options<GetWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetWorkflowResponse,
      GetWorkflowError,
      ThrowOnError
    >({
      ...options,
      url: '/api/workflows/{workflow_id}',
    });
  }

  /**
   * Delete Workflow
   * Delete a workflow by ID
   */
  public static deleteWorkflow<ThrowOnError extends boolean = false>(
    options: Options<DeleteWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      DeleteWorkflowResponse,
      DeleteWorkflowError,
      ThrowOnError
    >({
      ...options,
      url: '/api/workflows/{workflow_id}',
    });
  }

  /**
   * Get Workflows
   * Get all workflows for the current user.
   */
  public static getWorkflows<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetWorkflowsResponse,
      GetWorkflowsError,
      ThrowOnError
    >({
      ...options,
      url: '/api/workflows',
    });
  }

  /**
   * Create Workflow
   * Create a new workflow
   */
  public static createWorkflow<ThrowOnError extends boolean = false>(
    options: Options<CreateWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      CreateWorkflowResponse,
      CreateWorkflowError,
      ThrowOnError
    >({
      ...options,
      url: '/api/workflows',
    });
  }

  /**
   * Update Workflow
   * Update a workflow by ID
   */
  public static updateWorkflow<ThrowOnError extends boolean = false>(
    options: Options<UpdateWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).put<
      UpdateWorkflowResponse,
      UpdateWorkflowError,
      ThrowOnError
    >({
      ...options,
      url: '/workflows/{workflow_id}',
    });
  }

  /**
   * Run Workflow
   * Runs the workflow associated with id `workflow_id` on the passed in csv,
   * and returns any results or errors from the run. The workflow_id must be
   * associated with a workflow the calling user has access to.
   */
  public static runWorkflow<ThrowOnError extends boolean = false>(
    options: Options<RunWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      RunWorkflowResponse,
      RunWorkflowError,
      ThrowOnError
    >({
      ...options,
      ...formDataBodySerializer,
      headers: {
        'Content-Type': null,
      },
      url: '/api/workflows/{workflow_id}/run',
    });
  }

  /**
   * Return Workflow
   * Returns a serialized json representation of the workflow that can be used
   * to run the workflow locally. The workflow_id must be associated with a
   * workflow the calling user has access to.
   */
  public static returnWorkflow<ThrowOnError extends boolean = false>(
    options: Options<ReturnWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      ReturnWorkflowResponse,
      ReturnWorkflowError,
      ThrowOnError
    >({
      ...options,
      url: '/api/workflows/{workflow_id}/run',
    });
  }
}
