// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from '@hey-api/client-fetch';
import type {
  GetSelfUserError,
  GetSelfUserResponse,
  GetWorkflowData,
  GetWorkflowError,
  GetWorkflowResponse,
  UpdateWorkflowData,
  UpdateWorkflowError,
  UpdateWorkflowResponse,
  DeleteWorkflowData,
  DeleteWorkflowError,
  DeleteWorkflowResponse,
  GetWorkflowsError,
  GetWorkflowsResponse,
  CreateWorkflowData,
  CreateWorkflowError,
  CreateWorkflowResponse,
} from './types.gen';

export const client = createClient(createConfig());

export class UsersService {
  /**
   * Get Self User
   * Get the currently signed in user
   */
  public static getSelfUser<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetSelfUserResponse,
      GetSelfUserError,
      ThrowOnError
    >({
      ...options,
      url: '/api/user/self',
    });
  }
}

export class WorkflowsService {
  /**
   * Get Workflow
   * Get a workflow by ID
   */
  public static getWorkflow<ThrowOnError extends boolean = false>(
    options: Options<GetWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetWorkflowResponse,
      GetWorkflowError,
      ThrowOnError
    >({
      ...options,
      url: '/workflows/{workflow_id}',
    });
  }

  /**
   * Update Workflow
   * Update a workflow by ID
   */
  public static updateWorkflow<ThrowOnError extends boolean = false>(
    options: Options<UpdateWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).put<
      UpdateWorkflowResponse,
      UpdateWorkflowError,
      ThrowOnError
    >({
      ...options,
      url: '/workflows/{workflow_id}',
    });
  }

  /**
   * Delete Workflow
   * Delete a workflow by ID
   */
  public static deleteWorkflow<ThrowOnError extends boolean = false>(
    options: Options<DeleteWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).delete<
      DeleteWorkflowResponse,
      DeleteWorkflowError,
      ThrowOnError
    >({
      ...options,
      url: '/workflows/{workflow_id}',
    });
  }

  /**
   * Get Workflows
   * Get all workflows for the current user.
   */
  public static getWorkflows<ThrowOnError extends boolean = false>(
    options?: Options<unknown, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetWorkflowsResponse,
      GetWorkflowsError,
      ThrowOnError
    >({
      ...options,
      url: '/workflows',
    });
  }

  /**
   * Create Workflow
   * Create a new workflow
   */
  public static createWorkflow<ThrowOnError extends boolean = false>(
    options: Options<CreateWorkflowData, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      CreateWorkflowResponse,
      CreateWorkflowError,
      ThrowOnError
    >({
      ...options,
      url: '/workflows',
    });
  }
}
