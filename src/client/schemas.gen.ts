// This file is auto-generated by @hey-api/openapi-ts

export const BaseWorkflowSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    owner: {
      type: 'string',
      title: 'Owner',
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      title: 'Created Date',
    },
  },
  type: 'object',
  required: ['id', 'title', 'owner', 'created_date'],
  title: 'BaseWorkflow',
  description: 'The base Workflow model',
} as const;

export const BasicFieldDataTypeSchemaSchema = {
  properties: {
    dataType: {
      type: 'string',
      enum: ['any', 'string', 'number'],
      title: 'Datatype',
    },
  },
  type: 'object',
  required: ['dataType'],
  title: 'BasicFieldDataTypeSchema',
  description: `Represents a data type with no additional configuration other
than its literal type`,
} as const;

export const Body_run_workflowSchema = {
  properties: {
    file: {
      type: 'string',
      format: 'binary',
      title: 'File',
    },
    workflow_inputs: {
      type: 'string',
      title: 'Workflow Inputs',
    },
  },
  type: 'object',
  required: ['file', 'workflow_inputs'],
  title: 'Body_run_workflow',
} as const;

export const FieldSchemaSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    caseSensitive: {
      type: 'boolean',
      title: 'Casesensitive',
    },
    required: {
      type: 'boolean',
      title: 'Required',
    },
    dataTypeValidation: {
      anyOf: [
        {
          $ref: '#/components/schemas/BasicFieldDataTypeSchema',
        },
        {
          $ref: '#/components/schemas/TimestampDataTypeSchema',
        },
      ],
      title: 'Datatypevalidation',
    },
    allowEmptyValues: {
      type: 'boolean',
      title: 'Allowemptyvalues',
    },
    allowedValues: {
      anyOf: [
        {
          items: {
            type: 'string',
          },
          type: 'array',
        },
        {
          $ref: '#/components/schemas/ParamReference',
        },
        {
          type: 'null',
        },
      ],
      title: 'Allowedvalues',
    },
  },
  type: 'object',
  required: [
    'id',
    'name',
    'caseSensitive',
    'required',
    'dataTypeValidation',
    'allowEmptyValues',
    'allowedValues',
  ],
  title: 'FieldSchema',
  description: 'The validation schema for a dataset column',
} as const;

export const FieldsetSchema_InputSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    orderMatters: {
      type: 'boolean',
      title: 'Ordermatters',
    },
    fields: {
      items: {
        $ref: '#/components/schemas/FieldSchema',
      },
      type: 'array',
      title: 'Fields',
    },
    allowExtraColumns: {
      type: 'string',
      enum: ['no', 'anywhere', 'onlyAfterSchemaFields'],
      title: 'Allowextracolumns',
    },
  },
  type: 'object',
  required: ['id', 'name', 'orderMatters', 'fields', 'allowExtraColumns'],
  title: 'FieldsetSchema',
  description: `The validation schema for a dataset's fieldset. Or, in other words,
the column schemas. E.g. the column names, order, data types, allowable values.`,
} as const;

export const FieldsetSchema_OutputSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    orderMatters: {
      type: 'boolean',
      title: 'Ordermatters',
    },
    fields: {
      items: {
        $ref: '#/components/schemas/FieldSchema',
      },
      type: 'array',
      title: 'Fields',
    },
    allowExtraColumns: {
      type: 'string',
      enum: ['no', 'anywhere', 'onlyAfterSchemaFields'],
      title: 'Allowextracolumns',
    },
  },
  type: 'object',
  required: ['id', 'name', 'orderMatters', 'fields', 'allowExtraColumns'],
  title: 'FieldsetSchema',
  description: `The validation schema for a dataset's fieldset. Or, in other words,
the column schemas. E.g. the column names, order, data types, allowable values.`,
} as const;

export const FieldsetSchemaValidationSchema = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    type: {
      type: 'string',
      enum: ['fieldsetSchemaValidation'],
      const: 'fieldsetSchemaValidation',
      title: 'Type',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    fieldsetSchema: {
      anyOf: [
        {
          type: 'string',
        },
        {
          $ref: '#/components/schemas/ParamReference',
        },
      ],
      title: 'Fieldsetschema',
    },
  },
  type: 'object',
  required: ['title', 'description', 'type', 'id', 'fieldsetSchema'],
  title: 'FieldsetSchemaValidation',
  description:
    'A validation operation to validate the dataset columns and their values',
} as const;

export const FileTypeValidationSchema = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    type: {
      type: 'string',
      enum: ['fileTypeValidation'],
      const: 'fileTypeValidation',
      title: 'Type',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    expectedFileType: {
      type: 'string',
      title: 'Expectedfiletype',
    },
  },
  type: 'object',
  required: ['title', 'description', 'type', 'id', 'expectedFileType'],
  title: 'FileTypeValidation',
  description: 'A validation operation to check file type',
} as const;

export const FullWorkflowSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    owner: {
      type: 'string',
      title: 'Owner',
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      title: 'Created Date',
    },
    schema: {
      $ref: '#/components/schemas/WorkflowSchema-Output',
    },
  },
  type: 'object',
  required: ['id', 'title', 'owner', 'created_date', 'schema'],
  title: 'FullWorkflow',
  description: 'A full workflow object, including the JSON schema',
} as const;

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const;

export const ParamReferenceSchema = {
  properties: {
    paramId: {
      type: 'string',
      title: 'Paramid',
    },
  },
  type: 'object',
  required: ['paramId'],
  title: 'ParamReference',
  description: 'A simple object that references a param name',
} as const;

export const RowCountValidationSchema = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    type: {
      type: 'string',
      enum: ['rowCountValidation'],
      const: 'rowCountValidation',
      title: 'Type',
    },
    id: {
      type: 'string',
      title: 'Id',
    },
    minRowCount: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Minrowcount',
    },
    maxRowCount: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Maxrowcount',
    },
  },
  type: 'object',
  required: [
    'title',
    'description',
    'type',
    'id',
    'minRowCount',
    'maxRowCount',
  ],
  title: 'RowCountValidation',
  description: 'A validation operation to check row counts',
} as const;

export const TimestampDataTypeSchemaSchema = {
  properties: {
    dataType: {
      type: 'string',
      enum: ['timestamp'],
      const: 'timestamp',
      title: 'Datatype',
    },
    dateTimeFormat: {
      type: 'string',
      title: 'Datetimeformat',
    },
  },
  type: 'object',
  required: ['dataType', 'dateTimeFormat'],
  title: 'TimestampDataTypeSchema',
  description: `Represents a Timestamp data type. It requires a \`date_time_format\` to
represent how a timestamp should be represented.`,
} as const;

export const UserSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    email: {
      type: 'string',
      title: 'Email',
    },
    identity_provider: {
      type: 'string',
      title: 'Identity Provider',
    },
    family_name: {
      type: 'string',
      title: 'Family Name',
    },
    given_name: {
      type: 'string',
      title: 'Given Name',
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      title: 'Created Date',
    },
  },
  type: 'object',
  required: [
    'id',
    'email',
    'identity_provider',
    'family_name',
    'given_name',
    'created_date',
  ],
  title: 'User',
  description: 'The base User schema to use in the API.',
} as const;

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const;

export const ValidationFailureSchema = {
  properties: {
    message: {
      type: 'string',
      title: 'Message',
    },
    rowNumber: {
      anyOf: [
        {
          type: 'integer',
        },
        {
          type: 'null',
        },
      ],
      title: 'Rownumber',
    },
  },
  type: 'object',
  required: ['message'],
  title: 'ValidationFailure',
  description: `A validation failure with a message.

Arguments:
- message (str) -- The error message
- row_number (int | None) -- The row number of the error. Or None if there
    is no row number (e.g. if this is a file type error).`,
} as const;

export const WorkflowCreateSchema = {
  properties: {
    title: {
      type: 'string',
      title: 'Title',
    },
  },
  type: 'object',
  required: ['title'],
  title: 'WorkflowCreate',
  description: 'Data model to create a new Workflow',
} as const;

export const WorkflowParamSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    name: {
      type: 'string',
      title: 'Name',
    },
    displayName: {
      type: 'string',
      title: 'Displayname',
    },
    description: {
      type: 'string',
      title: 'Description',
    },
    required: {
      type: 'boolean',
      title: 'Required',
    },
    type: {
      type: 'string',
      enum: ['string', 'number', 'string list'],
      title: 'Type',
    },
  },
  type: 'object',
  required: ['id', 'name', 'displayName', 'description', 'required', 'type'],
  title: 'WorkflowParam',
  description: `The schema representing an argument (an input) for the Workflow that
is passed in when a Workflow is kicked off.

Args:
- id: str - uuid, a stable id for this param that is not user-editable
- name: str - auto-generated name from the \`display_name\` to be used as the variable name for this param.
- display_name: str - user-editable display name of this param
- description: str
- required: bool`,
} as const;

export const WorkflowRunReportSchema = {
  properties: {
    rowCount: {
      type: 'integer',
      title: 'Rowcount',
    },
    filename: {
      type: 'string',
      title: 'Filename',
    },
    workflowId: {
      type: 'string',
      title: 'Workflowid',
    },
    validationFailures: {
      items: {
        $ref: '#/components/schemas/ValidationFailure',
      },
      type: 'array',
      title: 'Validationfailures',
    },
  },
  type: 'object',
  required: ['rowCount', 'filename', 'workflowId', 'validationFailures'],
  title: 'WorkflowRunReport',
  description: 'Report for a server-side run of a workflow.',
} as const;

export const WorkflowSchema_InputSchema = {
  properties: {
    version: {
      type: 'string',
      enum: ['0.1'],
      const: '0.1',
      title: 'Version',
    },
    operations: {
      items: {
        anyOf: [
          {
            $ref: '#/components/schemas/FieldsetSchemaValidation',
          },
          {
            $ref: '#/components/schemas/FileTypeValidation',
          },
          {
            $ref: '#/components/schemas/RowCountValidation',
          },
        ],
      },
      type: 'array',
      title: 'Operations',
    },
    fieldsetSchemas: {
      items: {
        $ref: '#/components/schemas/FieldsetSchema-Input',
      },
      type: 'array',
      title: 'Fieldsetschemas',
    },
    params: {
      items: {
        $ref: '#/components/schemas/WorkflowParam',
      },
      type: 'array',
      title: 'Params',
    },
  },
  type: 'object',
  required: ['version', 'operations', 'fieldsetSchemas', 'params'],
  title: 'WorkflowSchema',
  description:
    'A schema represents the sequence of operations a Workflow should apply.',
} as const;

export const WorkflowSchema_OutputSchema = {
  properties: {
    version: {
      type: 'string',
      enum: ['0.1'],
      const: '0.1',
      title: 'Version',
    },
    operations: {
      items: {
        anyOf: [
          {
            $ref: '#/components/schemas/FieldsetSchemaValidation',
          },
          {
            $ref: '#/components/schemas/FileTypeValidation',
          },
          {
            $ref: '#/components/schemas/RowCountValidation',
          },
        ],
      },
      type: 'array',
      title: 'Operations',
    },
    fieldsetSchemas: {
      items: {
        $ref: '#/components/schemas/FieldsetSchema-Output',
      },
      type: 'array',
      title: 'Fieldsetschemas',
    },
    params: {
      items: {
        $ref: '#/components/schemas/WorkflowParam',
      },
      type: 'array',
      title: 'Params',
    },
  },
  type: 'object',
  required: ['version', 'operations', 'fieldsetSchemas', 'params'],
  title: 'WorkflowSchema',
  description:
    'A schema represents the sequence of operations a Workflow should apply.',
} as const;

export const WorkflowUpdateSchema = {
  properties: {
    id: {
      type: 'string',
      title: 'Id',
    },
    title: {
      type: 'string',
      title: 'Title',
    },
    owner: {
      type: 'string',
      title: 'Owner',
    },
    created_date: {
      type: 'string',
      format: 'date-time',
      title: 'Created Date',
    },
    schema: {
      $ref: '#/components/schemas/WorkflowSchema-Input',
    },
  },
  type: 'object',
  required: ['id', 'title', 'owner', 'created_date', 'schema'],
  title: 'WorkflowUpdate',
  description: 'Data model to update a Workflow',
} as const;
